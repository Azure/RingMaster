<?xml version="1.0" encoding="utf-8"?>
<!--
***********************************************************************************************
Environment.props

This file overrides shipped msbuild settings to work well in an isolated no-install drop

Environment.Custom.props should be configured by the build environment administrators to
  * Setup paths to local SDKs and Tools
  * Add the necessary extensibility hooks for customization from consumers

Build environment administrators must call Environment.{cmd|ps1} from this directory to
setup the build environment properly.


Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>    
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Azure</AssemblyProduct>
    <AssemblyCopyright>Copyright $([System.DateTime]::Now.ToString(`yyyy`)) Microsoft Corporation. All rights reserved.</AssemblyCopyright>    

    <!-- Default date if we're not in an official build. -->
    <!-- Before Q_SESSION_ID is available, use the timestamp in Q_CommandLogDir, e.g. d:\dbs\sh\acnn\1026_230501_log -->
    <Q_SESSION_ID Condition="'$(Q_SESSION_ID)' == ''">$([System.Text.RegularExpressions.Regex]::Match($(Q_CommandLogDir), ".*\\([\d,_]+)_log").Groups[1].Value)</Q_SESSION_ID>
    <!-- Session on CloudBuild: 1026_173431_0 to 1026-1734 -->
    <_session Condition="'$(Q_SESSION_ID)' != ''">$(Q_SESSION_ID.Substring(0,9).Replace('_', '-'))</_session>
    <!-- now 161026-1734 -->
    <_thisYear>$([System.DateTime]::Now.ToString("yy"))$(_session)</_thisYear>
    <!-- change to integer -->
    <_thisYearNum>$(_thisYear.Replace('-', ''))</_thisYearNum>
    <!-- number representation of the current time -->
    <_nowTS>$([System.DateTime]::Now.ToString("yyMMddHHmm"))</_nowTS>
    <!-- Only assign on CloudBuild -->
    <_ts Condition="$(_thisYearNum) &lt; $(_nowTS) And '$(_session)' != ''">$(_thisYear)</_ts>
    <_lastYear>$([System.DateTime]::Now.ToString("yy"))</_lastYear>
    <_ts Condition="'$(_ts)' == '' And '$(_session)' != ''">$([MSBuild]::Subtract($(_lastYear), 1))$(_session)</_ts>
    <!-- Fall back to current time on dev machine -->
    <_ts Condition="'$(_ts)' == ''">$([System.DateTime]::Now.ToString("yyMMdd-HHmm"))</_ts>

    <!-- Ensure we have timestamp associated with the build start/schedule time even when the build is distributed on
         multiple machines -->
    <BuildDate Condition="'$(BuildDate)' == ''">$(_ts)</BuildDate>

    <GitRepositoryName Condition="'$(GitRepositoryName)' == ''">Networking-Vega</GitRepositoryName>

    <_VersionFile>$([System.IO.File]::ReadAllText("$(CONFROOT)\.inc\Versions.xml"))</_VersionFile>
    <BuildNumber Condition="'$(BuildNumber)' == ''">$([System.Text.RegularExpressions.Regex]::Match($(_VersionFile), 'value="([^"]+)"').Groups[1].Value)</BuildNumber>
    <!-- Change 5.4.11490.8-zhyao6557778 to 5.4.11490.8 in BuildTracker buddy build -->
    <BuildNumber>$([System.Text.RegularExpressions.Regex]::Replace($(BuildNumber), "-.*", ""))</BuildNumber>

    <!-- For normal build on Build Tracker machines or dev machines -->
    <_githead>$(REPOROOT)\.git\HEAD</_githead>
    <_gitorghead>$(REPOROOT)\.git\ORIG_HEAD</_gitorghead>
    <_BranchFile Condition="Exists($(_githead))">$([System.IO.File]::ReadAllText("$(_githead)"))</_BranchFile>
    <_CommitHash Condition="Exists($(_gitorghead))">$([System.IO.File]::ReadAllText("$(_gitorghead)"))</_CommitHash>
    <!-- In QuickBuild sandbox symlink for .git does not exist. This format is for regex parsing of branch name -->
    <_BranchFile Condition="!Exists($(_githead))">refs/heads/quickbuild</_BranchFile>
    <!-- On CloudBuild, symlink for .git does not exist -->
    <_CommitHash Condition="'$(VersionCommitHash)' == '' And '$(Q_SYNCTO_CHANGELIST)' != '' And '$(Q_SYNCTO_CHANGELIST)' != '0' ">$(Q_SYNCTO_CHANGELIST)</_CommitHash>
    <!-- For BuildTracker buddy build, neither of above way works -->
    <_CommitHash Condition="'$(_CommitHash)' == ''">0123456789</_CommitHash>

    <!-- These environment variables are only available on the BuildTracker machines -->
    <GitBranchName Condition="'$(GitBranchName)' == ''">$([System.Text.RegularExpressions.Regex]::Match($(_BranchFile), 'refs/heads/([^\n]+)').Groups[1].Value)</GitBranchName>
    <!-- Normalize the branch name, which will be part of build number later -->
    <GitBranchName>$([System.Text.RegularExpressions.Regex]::Replace($(GitBranchName), '[/|\.\-"%3C%3E]', '_'))</GitBranchName>

    <!-- On private machine, append user name to the branch name -->
    <GitBranchName Condition="'$(BuildTracker)'=='' And Exists('$(REPOROOT)\.git')">$(GitBranchName)_$(USERNAME)</GitBranchName>

    <VersionCommitHash Condition="'$(VersionCommitHash)'==''">$(_CommitHash.Substring(0,7))</VersionCommitHash>

    <!-- Fix nuget package version on CloudBuild -->
    <PackageVersion Condition="'$(NOTQBUILD)'!='1'">$(BuildNumber)</PackageVersion>

    <!-- Duplicated BuildNumber is not a mistake.  It is a workaround for a problem with buildver? -->
    <AssemblyInformationalVersion Condition="$(AssemblyInformationalVersion) == ''">$(BuildNumber) ($(BuildNumber).$(GitRepositoryName)_$(GitBranchName).$(BuildDate) $(VersionCommitHash))</AssemblyInformationalVersion>
  </PropertyGroup>
  
  <!-- Auto generate NuGet packages from projects. This is temporary stopgap solution 
    to help with migrations until we can get a permanant packaging system in place. -->
  <PropertyGroup>    
    <InstallPkgLocal Condition="'$(InstallPkgLocal)'==''">false</InstallPkgLocal>
  </PropertyGroup>

  <!-- Turning off CLS compliance warnings/errors -->
  <PropertyGroup>    
    <AssemblyCLSCompliant>false</AssemblyCLSCompliant> 
  </PropertyGroup>
  
   <!-- Settings common to all projects -->
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <StyleCopTreatErrorsAsWarnings Condition="'$(BuildingInsideVisualStudio)' != 'true'">false</StyleCopTreatErrorsAsWarnings>
    <CodeAnalysisIgnoreGeneratedCode>true</CodeAnalysisIgnoreGeneratedCode>
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
  </PropertyGroup>  
  
  <!-- Required for using Nuproj targets since we don't check in NuGet.exe -->
  <PropertyGroup>
    <NuProjToolPath>$(PkgNuGet_CommandLine)\tools</NuProjToolPath>
  </PropertyGroup> 
  
  <!-- FxCop Analyzers -->
  <PropertyGroup>
    <RunCA Condition="'$(RunCA)' == ''">$true</RunCA>
  </PropertyGroup>
  
  <PropertyGroup>
    <EnableStyleCop Condition="'$(EnableStyleCop)' == ''">false</EnableStyleCop>
  </PropertyGroup>
  
  <Target Name="SetStyleCop" BeforeTargets="ResolveCodeAnalysisRuleSet">
    <PropertyGroup Condition=" '$(EnableStyleCop)' == 'true' ">
      <CodeAnalysisRuleSetDirectories>$(REPOROOT)\src;$(CodeAnalysisRuleSetDirectories)</CodeAnalysisRuleSetDirectories>
    </PropertyGroup>
    <ItemGroup  Condition=" '$(EnableStyleCop)' == 'true' ">
      <AdditionalFiles Include="$(REPOROOT)\src\StyleCop\stylecop.json" />
      <Analyzer Include="$(PkgStyleCop_Analyzers)\analyzers\dotnet\cs\StyleCop.Analyzers.CodeFixes.dll" />
      <Analyzer Include="$(PkgStyleCop_Analyzers)\analyzers\dotnet\cs\StyleCop.Analyzers.dll" />
    </ItemGroup>

    <ItemGroup>
      <None Include="$(SRCROOT)\StyleCop\stylecop.json">
        <Link>stylecop.json</Link>
      </None>
    </ItemGroup> 
  </Target>
  
  <ItemGroup>
    <QCustomInput Include="$(REPOROOT)\src\StyleCop\*"/>
    <QCustomInput Include="$(PkgStyleCop_Analyzers)\analyzers\dotnet\cs\*"/>
  </ItemGroup>
  
  <PropertyGroup Label="Globals">
    <Platform Condition="'$(Platform)' == ''">x64</Platform>
    <PlatformTarget Condition="'$(PlatformTarget)' == ''">x64</PlatformTarget>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <WarningLevel>4</WarningLevel>
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>  
    
  <!-- Code Coverage -->
  <PropertyGroup>
    <CoverageCovsymPath>$(BinariesBuildTypeArchDirectory)\covsym</CoverageCovsymPath>
  </PropertyGroup>

  <!-- Ifx settings -->

  <PropertyGroup>
    <IFX_REF_CONTENTONLY_PROJ>false</IFX_REF_CONTENTONLY_PROJ>
  </PropertyGroup>

  <UsingTask TaskName="SimpleReplace" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Path ParameterType="System.String" Required="true" />
      <Find ParameterType="System.String" Required="true" />
      <Replace ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        File.WriteAllText(Path, File.ReadAllText(Path).Replace(Find, Replace));
      </Code>
    </Task>
  </UsingTask>
  
  <!-- Required for VS 2017 support -->
  <Target Name="UpdateOacrCscVariable"
    AfterTargets="ConfigureOacrProject"
    BeforeTargets="CoreCompile"
    Condition="Exists('$(MsBuildToolsPath)\Roslyn\csc.exe') and '$(OSSBUILD)' == ''">
    <SetEnvironment
        Name="OACRCSC"
        Value="$(MsBuildToolsPath)\Roslyn\csc.exe"/>
  </Target>

</Project>
