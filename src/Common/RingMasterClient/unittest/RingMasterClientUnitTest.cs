// <copyright file="RingMasterClientUnitTest.cs" company="Microsoft">
//     Copyright ©  2015
// </copyright>

namespace Microsoft.Azure.Networking.Infrastructure.RingMaster.RingMasterClientUnitTest
{
    using System;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Tracing;
    using System.Net;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Backend;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Communication;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.CommunicationProtocol;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Persistence.InMemory;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Requests;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Server;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Test;
    using Microsoft.Azure.Networking.Infrastructure.RingMaster.Transport;
    using VisualStudio.TestTools.UnitTesting;

    /// <summary>
    /// Base class for RingMasterClient unit tests.
    /// </summary>
    public class RingMasterClientUnitTest : IDisposable
    {
        /// <summary>
        /// Guid that identifies RingMasterClient event source.
        /// </summary>
        private readonly Guid ringMasterClientEventSourceGuid = Guid.Parse("1ad7222f-91a6-4e34-8ccf-916a66601022");

        /// <summary>
        /// Listener for events generated by EventSources.
        /// </summary>
        private readonly EventListener listener = new TestEventlistener();

        /// <summary>
        /// <see cref="MarshallerProtocol"/> is used as the communication protocol.
        /// </summary>
        private readonly ICommunicationProtocol protocol = new RingMasterCommunicationProtocol();

        /// <summary>
        /// <see cref="SimpleTransport"/> is used as the transport to send and receive requests/responses.
        /// </summary>
        private readonly SimpleTransport serverTransport;

        /// <summary>
        /// Persisted data factory.
        /// </summary>
        private readonly InMemoryFactory factory = new InMemoryFactory();

        /// <summary>
        /// RingMaster backend.
        /// </summary>
        private readonly RingMasterBackendCore backend;

        /// <summary>
        /// <see cref="RingMasterServer"/> implements ringmaster functionality.
        /// </summary>
        private readonly RingMasterServer ringMasterServer;

        /// <summary>
        /// CancellationTokenSource used to get the cancellation token that controls cancellation.
        /// </summary>
        private readonly CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

        /// <summary>
        /// Initializes a new instance of the <see cref="RingMasterClientUnitTest"/> class.
        /// </summary>
        public RingMasterClientUnitTest()
        {
            this.serverTransport = new SimpleTransport();
            this.backend = this.CreateBackend();
            this.ringMasterServer = new RingMasterServer(this.protocol, null, this.cancellationTokenSource.Token);
            this.ringMasterServer.RegisterTransport(this.serverTransport);
            this.ringMasterServer.OnInitSession = initRequest =>
            {
                return new CoreRequestHandler(this.backend, initRequest);
            };

            foreach (var source in EventSource.GetSources())
            {
                if (source.Guid == this.ringMasterClientEventSourceGuid)
                {
                    Trace.TraceInformation($"Enabling EventSource {source.Name}");
                    this.listener.EnableEvents(source, EventLevel.Verbose);
                }
            }
        }

        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Loads the client and server thumbprints from the configuration file.
        /// </summary>
        protected void SetupTest()
        {
        }

        /// <summary>
        /// Establishes a connection to the ring master instance that is being exercised
        /// by this test.
        /// </summary>
        /// <returns>A <see cref="IRingMasterRequestHandler"/> object that represents the connection.</returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "clientTransport and ringMaster are being disposed in case of exception")]
        protected IRingMasterRequestHandler ConnectToRingMaster()
        {
            SimpleTransport clientTransport = null;
            IRingMasterRequestHandler ringMaster = null;
            bool mustDispose = true;
            try
            {
                var configuration = new RingMasterClient.Configuration();
                IRingMasterClientInstrumentation instrumentation = new RingMasterClientInstrumentation();
                clientTransport = new SimpleTransport();
                ringMaster = new RingMasterClient(configuration, instrumentation, this.protocol, clientTransport, CancellationToken.None);

                clientTransport.Connect(this.serverTransport);
                mustDispose = false;
                return ringMaster;
            }
            finally
            {
                if (mustDispose)
                {
                    ringMaster.Dispose();
                    clientTransport.Dispose();
                }
            }
        }

        private static string GetSetting(string settingName)
        {
            if (settingName == "RingMaster.DontStartPseudoNodes")
            {
                return "false";
            }

            if (settingName == "RingMasterLimits.MaxGetChildrenEnumerationCount")
            {
                return "256";
            }

            return null;
        }

        /// <summary>
        /// Creates a new backend with an in-memory store
        /// </summary>
        /// <returns>Backend instance</returns>
        private RingMasterBackendCore CreateBackend()
        {
            RingMasterBackendCore backend = null;
            try
            {
                var backendStarted = new ManualResetEventSlim();
                Trace.TraceInformation("CreateBackend");

                RingMasterBackendCore.GetSettingFunction = GetSetting;
                backend = new RingMasterBackendCore(this.factory);

                backend.StartService = (p1, p2) => { backendStarted.Set(); };
                backend.Start();
                backend.OnBecomePrimary();

                Assert.IsTrue(backendStarted.Wait(30000));
                var backendToReturn = backend;
                backend = null;
                return backendToReturn;
            }
            finally
            {
                if (backend != null)
                {
                    backend.Dispose();
                }
            }
        }

        private void Dispose(bool isDisposing)
        {
            if (isDisposing)
            {
                this.listener.Dispose();
                this.serverTransport.Dispose();
                this.backend.Dispose();
                this.factory.Dispose();
                this.ringMasterServer.Dispose();
                this.cancellationTokenSource.Dispose();
            }
        }

        internal class RingMasterClientInstrumentation : IRingMasterClientInstrumentation
        {
            public int ConnectionCreatedCount { get; private set; }

            public int ConnectionClosedCount { get; private set; }

            public int RequestAbortedCount { get; private set; }

            public int RequestQueuedCount { get; private set; }

            public int RequestQueueFullCount { get; private set; }

            public int RequestSendFailedCount { get; private set; }

            public int RequestSentCount { get; private set; }

            public int RequestTimedOutCount { get; private set; }

            public int ResponseQueuedCount { get; private set; }

            public int ResponseReceivedCount { get; private set; }

            public int InvalidPacketReceivedCount { get; private set; }

            public int InvalidClientMessageReceivedCount { get; private set; }

            public int UnexpectedResponseCount { get; private set; }

            public ulong LastHeartBeatId { get; private set; }

            public int WatcherNotificationCount { get; private set; }

            public int WatcherNotFoundCount { get; private set; }

            public void ConnectionClosed(ulong connectionId, EndPoint remoteEndPoint, string remoteIdentity)
            {
                lock (this)
                {
                    this.ConnectionClosedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation ConnectionClosedCount={this.ConnectionClosedCount}");
            }

            public void ConnectionCreated(ulong connectionId, EndPoint remoteEndPoint, string remoteIdentity)
            {
                lock (this)
                {
                    this.ConnectionCreatedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation ConnectionCreatedCount={this.ConnectionCreatedCount}");
            }

            public void RequestAborted(ulong requestId, RingMasterRequestType requestType)
            {
                lock (this)
                {
                    this.RequestAbortedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestAbortedCount={this.RequestAbortedCount}");
            }

            public void RequestQueued(ulong requestId, RingMasterRequestType requestType, int pendingRequestCount)
            {
                lock (this)
                {
                    this.RequestQueuedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestQueuedCount={this.RequestQueuedCount}");
            }

            public void RequestQueueFull(ulong requestId, RingMasterRequestType requestType, int pendingRequestCount)
            {
                lock (this)
                {
                    this.RequestQueueFullCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestQueueFullCount={this.RequestQueueFullCount}");
            }

            public void RequestSendFailed(ulong requestId, RingMasterRequestType requestType)
            {
                lock (this)
                {
                    this.RequestSendFailedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestSendFailedCount={this.RequestSendFailedCount}");
            }

            public void RequestSent(ulong requestId, RingMasterRequestType requestType, int requestLength)
            {
                lock (this)
                {
                    this.RequestSentCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestSentCount={this.RequestSentCount}");
            }

            public void RequestTimedOut(ulong requestId, RingMasterRequestType requestType, TimeSpan elapsed)
            {
                lock (this)
                {
                    this.RequestTimedOutCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation RequestTimedOutCount={this.RequestTimedOutCount}");
            }

            public void ResponseQueued(int responseLength)
            {
                lock (this)
                {
                    this.ResponseQueuedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation ResponseQueuedCount={this.ResponseQueuedCount}");
            }

            public void ResponseProcessed(ulong requestId, RingMasterRequestType requestType, int resultCode, TimeSpan elapsed)
            {
                lock (this)
                {
                    this.ResponseReceivedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation ResponseReceivedCount={this.ResponseReceivedCount}");
            }

            public void InvalidPacketReceived()
            {
                lock (this)
                {
                    this.InvalidPacketReceivedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation InvalidPacketReceivedCount={this.InvalidPacketReceivedCount}");
            }

            public void InvalidClientMessageReceived()
            {
                lock (this)
                {
                    this.InvalidClientMessageReceivedCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation InvalidClientMessageReceivedCount={this.InvalidClientMessageReceivedCount}");
            }

            public void UnexpectedResponseReceived(ulong callId)
            {
                lock (this)
                {
                    this.UnexpectedResponseCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation UnexpectedResponseCount={this.UnexpectedResponseCount}");
            }

            public void HeartBeatSent(ulong heartBeatId)
            {
                lock (this)
                {
                    this.LastHeartBeatId = heartBeatId;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation LastHeartBeatId={this.LastHeartBeatId}");
            }

            public void WatcherNotificationReceived(WatchedEvent.WatchedEventType eventType)
            {
                lock (this)
                {
                    this.WatcherNotificationCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation WatcherNotificationCount={this.WatcherNotificationCount}");
            }

            public void WatcherNotFound()
            {
                lock (this)
                {
                    this.WatcherNotFoundCount++;
                }

                Trace.TraceInformation($"RingMasterClientInstrumentation WatcherNotFoundCount={this.WatcherNotFoundCount}");
            }
        }

        private class TestEventlistener : EventListener
        {
            protected override void OnEventWritten(EventWrittenEventArgs args)
            {
            }
        }
    }
}
