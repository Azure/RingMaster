// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: JobRunnerProto.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Microsoft.Vega.JobRunnerProto {
  public static partial class JobRunnerSvc
  {
    static readonly string __ServiceName = "Microsoft.Vega.JobRunnerProto.JobRunnerSvc";

    static readonly grpc::Marshaller<global::Microsoft.Vega.DistTestCommonProto.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.DistTestCommonProto.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.Vega.JobRunnerProto.GetJobStateReply> __Marshaller_GetJobStateReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.JobRunnerProto.GetJobStateReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest> __Marshaller_GetJobMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply> __Marshaller_GetJobMetricsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply> __Marshaller_GetServiceInstanceIdentityReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.Vega.JobRunnerProto.StartJobRequest> __Marshaller_StartJobRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.Vega.JobRunnerProto.StartJobRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.DistTestCommonProto.Empty> __Method_CancelRunningJob = new grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.DistTestCommonProto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelRunningJob",
        __Marshaller_Empty,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.JobRunnerProto.GetJobStateReply> __Method_GetJobState = new grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.JobRunnerProto.GetJobStateReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetJobState",
        __Marshaller_Empty,
        __Marshaller_GetJobStateReply);

    static readonly grpc::Method<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest, global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply> __Method_GetJobMetrics = new grpc::Method<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest, global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetJobMetrics",
        __Marshaller_GetJobMetricsRequest,
        __Marshaller_GetJobMetricsReply);

    static readonly grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply> __Method_GetServiceInstanceIdentity = new grpc::Method<global::Microsoft.Vega.DistTestCommonProto.Empty, global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceInstanceIdentity",
        __Marshaller_Empty,
        __Marshaller_GetServiceInstanceIdentityReply);

    static readonly grpc::Method<global::Microsoft.Vega.JobRunnerProto.StartJobRequest, global::Microsoft.Vega.DistTestCommonProto.Empty> __Method_StartJob = new grpc::Method<global::Microsoft.Vega.JobRunnerProto.StartJobRequest, global::Microsoft.Vega.DistTestCommonProto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartJob",
        __Marshaller_StartJobRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Microsoft.Vega.JobRunnerProto.JobRunnerProtoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of JobRunnerSvc</summary>
    public abstract partial class JobRunnerSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Microsoft.Vega.DistTestCommonProto.Empty> CancelRunningJob(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.Vega.JobRunnerProto.GetJobStateReply> GetJobState(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply> GetJobMetrics(global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply> GetServiceInstanceIdentity(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.Vega.DistTestCommonProto.Empty> StartJob(global::Microsoft.Vega.JobRunnerProto.StartJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for JobRunnerSvc</summary>
    public partial class JobRunnerSvcClient : grpc::ClientBase<JobRunnerSvcClient>
    {
      /// <summary>Creates a new client for JobRunnerSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public JobRunnerSvcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for JobRunnerSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public JobRunnerSvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected JobRunnerSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected JobRunnerSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Microsoft.Vega.DistTestCommonProto.Empty CancelRunningJob(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelRunningJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.Vega.DistTestCommonProto.Empty CancelRunningJob(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelRunningJob, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.DistTestCommonProto.Empty> CancelRunningJobAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelRunningJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.DistTestCommonProto.Empty> CancelRunningJobAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelRunningJob, null, options, request);
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetJobStateReply GetJobState(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJobState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetJobStateReply GetJobState(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetJobState, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetJobStateReply> GetJobStateAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJobStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetJobStateReply> GetJobStateAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetJobState, null, options, request);
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply GetJobMetrics(global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJobMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply GetJobMetrics(global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetJobMetrics, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply> GetJobMetricsAsync(global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJobMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetJobMetricsReply> GetJobMetricsAsync(global::Microsoft.Vega.JobRunnerProto.GetJobMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetJobMetrics, null, options, request);
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply GetServiceInstanceIdentity(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceInstanceIdentity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply GetServiceInstanceIdentity(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceInstanceIdentity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply> GetServiceInstanceIdentityAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceInstanceIdentityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.JobRunnerProto.GetServiceInstanceIdentityReply> GetServiceInstanceIdentityAsync(global::Microsoft.Vega.DistTestCommonProto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceInstanceIdentity, null, options, request);
      }
      public virtual global::Microsoft.Vega.DistTestCommonProto.Empty StartJob(global::Microsoft.Vega.JobRunnerProto.StartJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.Vega.DistTestCommonProto.Empty StartJob(global::Microsoft.Vega.JobRunnerProto.StartJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartJob, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.DistTestCommonProto.Empty> StartJobAsync(global::Microsoft.Vega.JobRunnerProto.StartJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.Vega.DistTestCommonProto.Empty> StartJobAsync(global::Microsoft.Vega.JobRunnerProto.StartJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartJob, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override JobRunnerSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new JobRunnerSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(JobRunnerSvcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CancelRunningJob, serviceImpl.CancelRunningJob)
          .AddMethod(__Method_GetJobState, serviceImpl.GetJobState)
          .AddMethod(__Method_GetJobMetrics, serviceImpl.GetJobMetrics)
          .AddMethod(__Method_GetServiceInstanceIdentity, serviceImpl.GetServiceInstanceIdentity)
          .AddMethod(__Method_StartJob, serviceImpl.StartJob).Build();
    }

  }
}
#endregion
